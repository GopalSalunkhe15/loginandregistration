{"ast":null,"code":"var _jsxFileName = \"/home/gopal.salunkhe/Desktop/assignment/src/component/reusable/registrationWithInputField.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst RegistrationWithInput = ({\n  inputProps,\n  userInput,\n  onInputChange,\n  ...props\n}) => {\n  debugger;\n\n  const getInputTextTypeDom = value => {\n    var _inputProps$value, _inputProps$value2, _inputProps$value3;\n\n    debugger;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"lable\", {\n        children: inputProps === null || inputProps === void 0 ? void 0 : (_inputProps$value = inputProps[value]) === null || _inputProps$value === void 0 ? void 0 : _inputProps$value.lable\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: inputProps === null || inputProps === void 0 ? void 0 : (_inputProps$value2 = inputProps[value]) === null || _inputProps$value2 === void 0 ? void 0 : _inputProps$value2.inputType,\n        onChange: onInputChange,\n        name: inputProps === null || inputProps === void 0 ? void 0 : (_inputProps$value3 = inputProps[value]) === null || _inputProps$value3 === void 0 ? void 0 : _inputProps$value3.tagName,\n        value: userInput[value]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 7\n    }, this);\n  };\n\n  const getRadioButtonTypeDom = value => {\n    debugger;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [value, \" :\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this), inputProps[value].value.map(lable => {\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            value: lable,\n            name: value,\n            checked: lable == userInput[value],\n            onChange: onInputChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 26,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"lable\", {\n            children: lable\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this);\n  };\n\n  debugger;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: Object.keys(inputProps).map(value => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: inputProps[value].type == \"editableText\" ? getInputTextTypeDom(value) : inputProps[value].type == \"editableRadioButton\" && getRadioButtonTypeDom(value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n\n_c = RegistrationWithInput;\nexport default RegistrationWithInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"RegistrationWithInput\");","map":{"version":3,"sources":["/home/gopal.salunkhe/Desktop/assignment/src/component/reusable/registrationWithInputField.js"],"names":["RegistrationWithInput","inputProps","userInput","onInputChange","props","getInputTextTypeDom","value","lable","inputType","tagName","getRadioButtonTypeDom","map","Object","keys","type"],"mappings":";;;;AAAA,MAAMA,qBAAqB,GAAG,CAAC;AAAEC,EAAAA,UAAF;AAAaC,EAAAA,SAAb;AAAwBC,EAAAA,aAAxB;AAAuC,KAAGC;AAA1C,CAAD,KAAuD;AACnF;;AAEA,QAAMC,mBAAmB,GAAGC,KAAK,IAAI;AAAA;;AACjC;AACF,wBACE;AAAA,8BACE;AAAA,kBAAQL,UAAR,aAAQA,UAAR,4CAAQA,UAAU,CAAGK,KAAH,CAAlB,sDAAQ,kBAAqBC;AAA7B;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AACE,QAAA,IAAI,EAAEN,UAAF,aAAEA,UAAF,6CAAEA,UAAU,CAAGK,KAAH,CAAZ,uDAAE,mBAAqBE,SAD7B;AAEE,QAAA,QAAQ,EAAEL,aAFZ;AAGE,QAAA,IAAI,EAAEF,UAAF,aAAEA,UAAF,6CAAEA,UAAU,CAAGK,KAAH,CAAZ,uDAAE,mBAAqBG,OAH7B;AAIE,QAAA,KAAK,EAAIP,SAAS,CAACI,KAAD;AAJpB;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAWD,GAbD;;AAcA,QAAMI,qBAAqB,GAAGJ,KAAK,IAAI;AACrC;AACA,wBACE;AAAA,8BACE;AAAA,mBAAQA,KAAR;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAEGL,UAAU,CAACK,KAAD,CAAV,CAAkBA,KAAlB,CAAwBK,GAAxB,CAA4BJ,KAAK,IAAI;AACpC,4BACE;AAAA,kCACE;AACE,YAAA,IAAI,EAAC,OADP;AAEE,YAAA,KAAK,EAAEA,KAFT;AAGE,YAAA,IAAI,EAAED,KAHR;AAIE,YAAA,OAAO,EAAEC,KAAK,IAAIL,SAAS,CAACI,KAAD,CAJ7B;AAKE,YAAA,QAAQ,EAAEH;AALZ;AAAA;AAAA;AAAA;AAAA,kBADF,eAQE;AAAA,sBAAQI;AAAR;AAAA;AAAA;AAAA;AAAA,kBARF;AAAA,wBADF;AAYD,OAbA,CAFH;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAyBD,GA3BD;;AA4BA;AACA,sBACE;AAAA,2BACE;AAAA,gBACGK,MAAM,CAACC,IAAP,CAAYZ,UAAZ,EAAwBU,GAAxB,CAA4BL,KAAK,IAAI;AACpC,4BACE;AAAA,oBACGL,UAAU,CAACK,KAAD,CAAV,CAAkBQ,IAAlB,IAA0B,cAA1B,GACGT,mBAAmB,CAACC,KAAD,CADtB,GAEGL,UAAU,CAACK,KAAD,CAAV,CAAkBQ,IAAlB,IAA0B,qBAA1B,IACAJ,qBAAqB,CAACJ,KAAD;AAJ3B;AAAA;AAAA;AAAA;AAAA,gBADF;AAcD,OAfA;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAsBD,CApED;;KAAMN,qB;AAsEN,eAAeA,qBAAf","sourcesContent":["const RegistrationWithInput = ({ inputProps,userInput, onInputChange, ...props }) => {\n  debugger;\n\n  const getInputTextTypeDom = value => {\n      debugger;\n    return (\n      <div>\n        <lable>{inputProps?.[value]?.lable}</lable>\n        <input\n          type={inputProps?.[value]?.inputType}\n          onChange={onInputChange}\n          name={inputProps?.[value]?.tagName}\n          value = {userInput[value]}\n        />\n      </div>\n    );\n  };\n  const getRadioButtonTypeDom = value => {\n    debugger;\n    return (\n      <div>\n        <label>{value} :</label>\n        {inputProps[value].value.map(lable => {\n          return (\n            <>\n              <input\n                type=\"radio\"\n                value={lable}\n                name={value}\n                checked={lable == userInput[value]}\n                onChange={onInputChange}\n              />\n              <lable>{lable}</lable>\n            </>\n          );\n        })}\n        {/* <lable>{inputProps?.[value]?.lable}</lable>\n        <input\n          type={inputProps?.[value]?.inputType}\n          onChange={onInputChange}\n          name={inputProps?.[value]?.tagName}\n        /> */}\n      </div>\n    );\n  };\n  debugger;\n  return (\n    <div>\n      <div>\n        {Object.keys(inputProps).map(value => {\n          return (\n            <div>\n              {inputProps[value].type == \"editableText\"\n                ? getInputTextTypeDom(value)\n                : inputProps[value].type == \"editableRadioButton\" &&\n                  getRadioButtonTypeDom(value)}\n              {/* <lable>{inputProps?.[value]?.lable}</lable>\n              <input\n                type={inputProps?.[value]?.inputType}\n                onChange={onInputChange}\n                name={inputProps?.[value]?.tagName}\n              /> */}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default RegistrationWithInput;\n"]},"metadata":{},"sourceType":"module"}